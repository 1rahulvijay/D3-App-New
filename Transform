import pandas as pd
import random
from collections import defaultdict
import logging

logger = logging.getLogger(__name__)

def generate_sankey_data_from_excel(file_path):
    try:
        # Read Excel data
        df = pd.read_excel(file_path)
        
        # Clean data
        df = df.dropna(subset=["Vertical", "Type"])
        df["Vertical"] = df["Vertical"].str.strip()
        df["Type"] = df["Type"].str.strip()

        # Unique nodes
        verticals = df["Vertical"].unique().tolist()
        types = df["Type"].unique().tolist()

        # Node list: ICMB ORG + Verticals + Types
        nodes = [{"name": "ICMB ORG"}] + [{"name": v} for v in verticals] + [{"name": t} for t in types]

        # Create index lookup
        node_indices = {node["name"]: idx for idx, node in enumerate(nodes)}

        # Links: ICMB ORG -> Vertical
        org_to_vertical = df.groupby("Vertical").size().to_dict()
        links = [
            {
                "source": node_indices["ICMB ORG"],
                "target": node_indices[vertical],
                "value": count
            }
            for vertical, count in org_to_vertical.items()
        ]

        # Links: Vertical -> Request Type
        vertical_to_type = df.groupby(["Vertical", "Type"]).size().to_dict()
        for (vertical, req_type), count in vertical_to_type.items():
            links.append({
                "source": node_indices[vertical],
                "target": node_indices[req_type],
                "value": count
            })

        # Metrics
        total_flow = sum(link["value"] for link in links)
        avg_flow_per_vertical = round(total_flow / len(verticals), 2) if verticals else 0
        total_requests = len(df)

        metrics = [
            {"label": "Total Flow", "value": total_flow},
            {"label": "Avg Flow per Vertical", "value": avg_flow_per_vertical},
            {"label": "Total Requests", "value": total_requests}
        ]

        return {"nodes": nodes, "links": links, "metrics": metrics}

    except Exception as e:
        logger.error(f"Error generating Sankey data: {e}")
        return {"nodes": [], "links": [], "metrics": []}
